#!/usr/bin/env python

import configparser
import datetime
import glob
import os
import subprocess

import click
import dateparser


DATE_FMTS = ["%Y-%m-%d", "%Y%m%d", "fuzzy"]
DAILY_DATETIME_FMT = "%Y.%m.%d"
TODAY = str(datetime.date.today())


# protocols

class local(object):
    def __init__(self, root):
        pass

    def add(self, filename):
        pass

    def commit(self, filename):
        pass

    def push(self):
        pass

    def pull(self):
        pass


class git(object):
    def __init__(self, root, git_executable="git"):
        self.root = root
        self.git_executable = git_executable

    def add(self, filename):
        os.chdir(self.root)
        cmd = [self.git_executable, "add", filename]
        process = subprocess.Popen(cmd)

    def commit(self, filename):
        os.chdir(self.root)
        click.echo(f"committing notes to local repo")
        cmd = [self.git_executable, "commit", "-a", "-m", "Automated commit", filename]
        process = subprocess.Popen(cmd, stdout=subprocess.DEVNULL)

    def pull(self):
        os.chdir(self.root)
        click.echo("pulling notes from remote repo...")
        cmd = [self.git_executable, "pull"]
        process = subprocess.Popen(cmd, stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL)

    def push(self):
        os.chdir(self.root)
        click.echo("pushing notes to remote repo...")
        cmd = [self.git_executable, "push"]
        process = subprocess.Popen(cmd, stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL)


def create_protocol(options):
    name = options.get("repo", "protocol", fallback="local")
    root = options.get("repo", "location")

    if name == "git":
        return(git(root))
    else:
        return(local(root))


# notes configuration file

def read_config():
    home = os.path.expanduser("~")
    basename = ".notesrc"
    config_filename = os.path.join(home, basename)
    options = configparser.ConfigParser()
    options.read(config_filename)
    return(options)


# Date class

class Date(click.ParamType):
    name = 'date'

    def __init__(self, formats=None):
        self.formats = formats or DATE_FMTS

    def get_metavar(self, param):
        return '[{}]'.format('|'.join(self.formats))

    def _try_to_convert_date(self, value, format):
        try:
            if format == "fuzzy":
                return dateparser.parse(value)
            else:
                return datetime.datetime.strptime(value, format).date()
        except ValueError:
            return None

    def convert(self, value, param, ctx):
        for format in self.formats:
            date = self._try_to_convert_date(value, format)
            if date:
                return date

        self.fail(
            'invalid date format: {}. (choose from {})'.format(
                value, ', '.join(self.formats)))

    def __repr__(self):
        return 'Date'


# helper routines

def convert_filename_string(title):
    return(title.replace(" ", "-"))


def create_note_basename(date, title):
    date_str = date.strftime(DAILY_DATETIME_FMT)
    filename_title = convert_filename_string(title)
    return(f"{date_str}.{filename_title}.md")


def create_note_filename(options, date, title):
    basename = create_note_basename(date, title)
    return(os.path.join(options.get("repo", "location"), basename))


def create_note(filename, title, protocol):
    if title == "DAILY":
        note_title = f"Daily notes for {TODAY}"
    else:
        note_title = title

    with open(filename, "w") as f:
        f.write(f"# {note_title}\n\n")

    protocol.add(filename)


def append_to_note(note_filename, text):
    with open(note_filename, "a") as f:
        f.write(f"{text}\n")


def open_note_in_editor(editor, note_filename):
    cmd = [editor, note_filename]
    process = subprocess.Popen(cmd)


# CLI interface

@click.group()
@click.version_option(version="0.0.1")
@click.help_option("-h", "--help")
def cli():
    pass


@cli.command()
@click.help_option("-h", "--help")
@click.option("--date", type=Date(), default=TODAY, help="Date of note to append.")
@click.option("--title", default="DAILY", help="Title of note to append to.")
@click.argument("text")
def append(date, title, text):
    """ Append to a note.
    """
    options = read_config()

    note_filename = create_note_filename(options, date, title)
    note_basename = os.path.basename(note_filename)

    if not os.path.exists(note_filename):
        new(date, title)

    click.echo(f"appending to note {note_basename}...")
    append_to_note(note_filename, text)


@cli.command()
@click.help_option("-h", "--help")
def init():
    """ Initialize a notes repository.
    """
    click.echo("init")


@cli.command()
@click.help_option("-h", "--help")
@click.option("--date", type=Date(), default=TODAY)
def list(date):
    """ List existing notes.
    """
    options = read_config()
    notes = glob.glob(os.path.join(options.get("repo", "location"), "*.md"))
    for n in notes: 
        with open(n, "r") as f:
            basename = os.path.basename(n)
            content = f.read()
            preview = content.split("\n")[0]
            click.echo(f"{basename:20s}: {preview}")


@cli.command()
@click.help_option("-h", "--help")
@click.option("--date", type=Date(), default=TODAY)
@click.option("--open", "open_flag", is_flag=True,
    help="Open note after creating it.")
@click.option("--title", default="DAILY", help="Title of note to create.")
def new(date, open_flag, title):
    """ Create a new note for a given date with a title.
    """
    options = read_config()

    note_filename = create_note_filename(options, date, title)
    note_basename = os.path.basename(note_filename)

    if os.path.exists(note_filename):
        click.echo(f"{note_basename} already exists")
        return

    protocol = create_protocol(options)

    click.echo(f"creating new note {note_basename}...")
    create_note(note_filename, title, protocol)
    if open_flag:
        click.echo(f"opening {note_basename}...")
        editor = options.get("notes", "editor", fallback="open")
        open_note_in_editor(editor, note_filename)


@cli.command(name="open")
@click.help_option("-h", "--help")
@click.option("--date", type=Date(), default=TODAY)
@click.option("--title", default="DAILY", help="Title of note to open.")
def open_note(date, title):
    """ Open the note in a text editor.
    """
    options = read_config()

    note_filename = create_note_filename(options, date, title)
    note_basename = os.path.basename(note_filename)

    if not os.path.exists(note_filename):
        click.echo(f"{note_basename} does not exist")
        return

    click.echo(f"opening {note_basename}...")
    editor = options.get("notes", "editor", fallback="open")
    open_note_in_editor(editor, note_filename)


@cli.command()
@click.help_option("-h", "--help")
def output():
    """ Render note as HTML.
    """
    click.echo("output")


@cli.command()
@click.help_option("-h", "--help")
def commit():
    """ Commit notes to repo.
    """
    options = read_config()
    protocol = create_protocol(options)
    protocol.commit("-a")


@cli.command()
@click.help_option("-h", "--help")
def pull():
    """ Pull notes from remote repo.
    """
    options = read_config()
    protocol = create_protocol(options)
    protocol.pull()


@cli.command()
@click.help_option("-h", "--help")
def push():
    """ Push notes to repo.
    """
    options = read_config()
    protocol = create_protocol(options)
    protocol.push()
    

if __name__ == "__main__":
    cli()
